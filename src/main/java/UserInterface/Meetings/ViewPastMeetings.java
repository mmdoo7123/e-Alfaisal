package UserInterface.Meetings;

import javax.swing.*;
import java.sql.*;
import java.time.LocalDate;
import java.util.Date;

public class ViewPastMeetings extends javax.swing.JFrame {
    String userID = UserInterface.UserSession.getInstance().getUserID();
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BackButton;
    private java.awt.List PastMeetingsList;
    private javax.swing.JLabel PastmeetingsLebel;
    private javax.swing.JButton SortButton;
    private javax.swing.JPopupMenu jPopupMenu1;

    /**
     * Creates new form ViewPastMeetings
     */
    public ViewPastMeetings() {
        initComponents();
        this.setLocationRelativeTo(null);
        this.setVisible(false);
        this.setResizable(false);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ViewPastMeetings.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ViewPastMeetings.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ViewPastMeetings.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ViewPastMeetings.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ViewPastMeetings().setVisible(true);
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        PastmeetingsLebel = new javax.swing.JLabel();
        PastMeetingsList = new java.awt.List();
        SortButton = new javax.swing.JButton();
        BackButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        PastmeetingsLebel.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        PastmeetingsLebel.setText("Past meetings:");

        SortButton.setText("Sort ");
        SortButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                SortButtonMouseClicked(evt);
            }
        });

        BackButton.setText("Back");
        BackButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BackButtonMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(PastmeetingsLebel, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(0, 179, Short.MAX_VALUE))
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(PastMeetingsList, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                        .addComponent(BackButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(SortButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 94, Short.MAX_VALUE))))
                                .addContainerGap())
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(PastmeetingsLebel, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(4, 4, 4)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(SortButton, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(BackButton, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(PastMeetingsList, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(0, 0, Short.MAX_VALUE)))
                                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void SortButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SortButtonMouseClicked
        try {
            // Create an array of options for the user to choose from to sort their meetings
            final String[] options = {"Sort Latest first", "Sort Oldest first"};

            // Display a dialog to ask the user how they would like to sort their meetings
            String choice = Controllers.Dialogues.showOptions(
                    "How would you like to sort your meetings?",
                    options);
            ResultSet resultSet = null;
            Connection connection = DriverManager.getConnection(
                    "jdbc:postgresql://localhost:5432/postgres", "postgres", "postgres");
            LocalDate currentDate = LocalDate.now();
            // Check if the user made a choice
            if (choice.equals(null) || choice.equals("")) {
                // If no choice was made, return
                return;
            } else if (choice.equalsIgnoreCase(options[0])) {
                // If the user chose to sort by latest date, set the type of sorting to be by latest date
                DataStructures.DataStructures.type = DataStructures.DataStructures.type_Latest;

                // Define the SQL statement to retrieve the "meetingdate" and "name" columns where the userid, status, and meeting date are appropriate
                try {
                    String sql = "SELECT meetingdate, studentid, name FROM scheduling.studentmeetings JOIN scheduling.scheduling_users ON studentmeetings.studentid = scheduling_users.id WHERE studentmeetings.status = 2 AND studentid = ? AND meetingdate < ?  order by meetingdate desc ";
                    PreparedStatement statement;

                    statement = connection.prepareStatement(sql);
                    String UserID = DataStructures.UserSession.getUserID();
                    // Prepare the SQL statement with the user ID and current date
                    // statement = connection.prepareStatement(sql);
                    statement.setString(1, UserID);
                    statement.setDate(2, java.sql.Date.valueOf(currentDate));

                    // Execute the SQL statement
                    resultSet = statement.executeQuery();
                    PastMeetingsList.removeAll();
                    while (resultSet.next()) {
                        Date date = resultSet.getDate("meetingdate");
                        String name = resultSet.getString("name");
                        PastMeetingsList.add(name + " " + date);
                    }

                } catch (SQLException ex) {
                    Controllers.Dialogues.showMessage("Error occured while sorting");
                }


            } else if (choice.equalsIgnoreCase(options[1])) {
                // If the user chose to sort by oldest date, set the type of sorting to be by oldest date
                DataStructures.DataStructures.type = DataStructures.DataStructures.type_Oldest;
                // Define the SQL statement to retrieve the "meetingdate" and "name" columns where the userid, status, and meeting date are appropriate
                try {
                    String sql = "SELECT meetingdate, studentid, name FROM scheduling.studentmeetings JOIN scheduling.scheduling_users ON studentmeetings.studentid = scheduling_users.id WHERE studentmeetings.status = 2 AND studentid = ? AND meetingdate < ?  order by meetingdate asc ";
                    PreparedStatement statement;

                    statement = connection.prepareStatement(sql);
                    String UserID = DataStructures.UserSession.getUserID();
                    // Prepare the SQL statement with the user ID and current date
                    // statement = connection.prepareStatement(sql);
                    statement.setString(1, UserID);
                    statement.setDate(2, java.sql.Date.valueOf(currentDate));

                    // Execute the SQL statement
                    resultSet = statement.executeQuery();
                    PastMeetingsList.removeAll();
                    while (resultSet.next()) {
                        Date date = resultSet.getDate("meetingdate");
                        String name = resultSet.getString("name");
                        PastMeetingsList.add(name + " " + date);
                    }

                } catch (SQLException ex) {
                    Controllers.Dialogues.showMessage("Error occured while sorting");
                }
            }
        } catch (SQLException ex) {
            Controllers.Dialogues.showMessage("Error occured while sorting");
        }
    }//GEN-LAST:event_SortButtonMouseClicked

    private void BackButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BackButtonMouseClicked
        JFrame frame = new MeetingsUI();
        frame.setVisible(true);
        this.setVisible(false);

    }//GEN-LAST:event_BackButtonMouseClicked

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        Connection connection = null;
        PreparedStatement statement = null;
        ResultSet resultSet = null;
        try {
            // Get today's current date
            LocalDate currentDate = LocalDate.now();

            // Connect to the database
            connection = DriverManager.getConnection(
                    "jdbc:postgresql://localhost:5432/postgres?currentSchema=scheduling_users", "postgres", "postgres");

            // Define the SQL statement to retrieve the "meetingdate" and "name" columns where the userid, status, and meeting date are appropriate
            String sql = "SELECT meetingdate, studentid, name FROM scheduling.studentmeetings JOIN scheduling.scheduling_users ON studentmeetings.studentid = scheduling_users.id WHERE studentmeetings.status = 2 AND studentid = ? AND meetingdate < ? ";
            String UserID = DataStructures.UserSession.getUserID();
            // Prepare the SQL statement with the user ID and current date
            statement = connection.prepareStatement(sql);
            statement.setString(1, UserID);
            statement.setDate(2, java.sql.Date.valueOf(currentDate));

            // Execute the SQL statement
            resultSet = statement.executeQuery();

            while (resultSet.next()) {
                Date date = resultSet.getDate("meetingdate");
                String name = resultSet.getString("name");
                PastMeetingsList.add(name + " " + date);
            }

        } catch (SQLException ex) {
            Controllers.Dialogues.showMessage("Error occured while opening window");
        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                }
                if (statement != null) {
                    statement.close();
                }
                if (connection != null) {
                    connection.close();
                }
            } catch (SQLException e) {
                Controllers.Dialogues.showMessage("Error occured while sorting");
            }
        }

    }//GEN-LAST:event_formWindowOpened
    // End of variables declaration//GEN-END:variables
}
