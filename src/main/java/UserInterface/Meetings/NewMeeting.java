package UserInterface.Meetings;


import Database.DataBase;
import UserInterface.Notes.NotesController;

import java.sql.*;
import java.time.LocalDate;
import java.time.ZoneId;
import java.util.Date;

public class NewMeeting extends javax.swing.JFrame {

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CancelMeetingButton;
    private javax.swing.JButton ConfirmMeetingButton;
    private javax.swing.JLabel SelectDateLabel;
    private com.toedter.calendar.JDateChooser jDateChooser1;

    /**
     * Creates new form NewMeeting
     */
//private UserAccount userAccount;
    public NewMeeting() {
        initComponents();
        this.setLocationRelativeTo(null);
        this.setVisible(false);
        this.setResizable(false);
        DataBase db = new DataBase();
        // userAccount = db.new UserAccount();

    }

    public NewMeeting(NotesController notesController) {
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewMeeting.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewMeeting.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewMeeting.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewMeeting.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NewMeeting().setVisible(true);
            }
        });
    }

    public void registerMeeting(Date date) {
        //    userAccount.registerMeeting(date);

        //  DataBase dataBase = new DataBase();
        //UserAccount userAccount = dataBase.new UserAccount();
        // userAccount.registerMeeting(date);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        SelectDateLabel = new javax.swing.JLabel();
        jDateChooser1 = new com.toedter.calendar.JDateChooser();
        ConfirmMeetingButton = new javax.swing.JButton();
        CancelMeetingButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        SelectDateLabel.setText("Select a date");

        ConfirmMeetingButton.setText("Confirm Meeting");
        ConfirmMeetingButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ConfirmMeetingButtonMouseClicked(evt);
            }
        });

        CancelMeetingButton.setText("Cancel Meeting");
        CancelMeetingButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                CancelMeetingButtonMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(35, 35, 35)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(ConfirmMeetingButton)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(CancelMeetingButton))
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(SelectDateLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jDateChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addContainerGap(34, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(35, 35, 35)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(SelectDateLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jDateChooser1, javax.swing.GroupLayout.DEFAULT_SIZE, 33, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 65, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(CancelMeetingButton, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(ConfirmMeetingButton, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(44, 44, 44))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //please fix the error in this code
    private void CancelMeetingButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CancelMeetingButtonMouseClicked
        // When the cancel meeting button is clicked, prompt the user with a confirmation dialogue
        if (Controllers.Dialogues.yesNoMessage("Are you sure you want to cancel")) {

            // Create a new instance of JFrame
            MeetingsUI meetingsUI = new MeetingsUI();
            meetingsUI.setVisible(true);
            // If the user confirms, close the current window
            this.dispose();
        }
    }//GEN-LAST:event_CancelMeetingButtonMouseClicked

    private void ConfirmMeetingButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ConfirmMeetingButtonMouseClicked
        // Get the date entered
        Date date = jDateChooser1.getDate();
        LocalDate selectedDate = date.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
        LocalDate minDate = LocalDate.now().plusDays(7);
        LocalDate maxDate = LocalDate.now().minusDays(1);
        // Check if a date has been entered
        if (date == null) {
            // If no date has been entered, display a message
            Controllers.Dialogues.showMessage("Please enter a date");
        } else if (selectedDate.isBefore(LocalDate.now())) {
            Controllers.Dialogues.showMessage("Please enter a date that is after today's date");
        }
        //  here is the error" incompatible types: Date cannot be converted to ChronoLocalDate"
        else {

            // Check if the selected date is at least a week in advance from the current date
            if (selectedDate.isBefore(minDate)) {
                Controllers.Dialogues.showMessage("Please select a date at least a week in advance");
                return;
            }


            // Check if a meeting has already been scheduled for the same user on the selected date
            try {
                Connection connection = DriverManager.getConnection(
                        "jdbc:postgresql://localhost:5432/postgres", "postgres", "postgres");

                String sql = "SELECT * FROM scheduling.studentmeetings WHERE studentid = ? AND meetingdate = ?";
                PreparedStatement statement = connection.prepareStatement(sql);
                String UserID = DataStructures.UserSession.getUserID();
                statement.setString(1, UserID);
                statement.setDate(2, new java.sql.Date(date.getTime()));

                ResultSet result = statement.executeQuery();

                if (result.next()) {
                    // A meeting has already been scheduled for the same user on the selected date
                    Controllers.Dialogues.showMessage("A meeting has already been scheduled for this user on the selected date. Please select another date");
                    return;
                }

                // Store the meeting date in the database
                String sql1 = "INSERT INTO scheduling.studentmeetings (studentid, meetingdate, status) VALUES (?, ?, ?)";
                PreparedStatement statement1 = connection.prepareStatement(sql1);

                // Set the values for the placeholder parameters in the SQL statement
                statement1.setString(1, UserID);
                statement1.setDate(2, new java.sql.Date(date.getTime()));
                statement1.setInt(3, 1);

                // Execute the SQL statement
                statement1.executeUpdate();
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
            // Show a new ConfirmationMessage window with the entered date
            new ConfirmationMessage(date).setVisible(true);
            this.dispose();
        }
    }//GEN-LAST:event_ConfirmMeetingButtonMouseClicked

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened

    }//GEN-LAST:event_formWindowOpened
    // End of variables declaration//GEN-END:variables
}
