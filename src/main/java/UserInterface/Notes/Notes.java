package UserInterface.Notes;

import UserInterface.MainMenuUI;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JFrame;
import Controllers.Dialogues;
import java.text.ParseException;
import java.time.LocalDate;

public class Notes extends javax.swing.JFrame {

    /**
     * Creates new form Notes
     */
    public Notes() {
        initComponents();
        this.setLocationRelativeTo(null);
        this.setVisible(false);
        this.setResizable(false);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        NotesList = new java.awt.List();
        CreateNewNoteButton = new javax.swing.JButton();
        DeleteNoteButton = new javax.swing.JButton();
        DiplayAllNotesButton = new javax.swing.JButton();
        SeeNoteutton = new javax.swing.JButton();
        SortNotesButton = new javax.swing.JButton();
        SearchNotesButton = new javax.swing.JButton();
        BackButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Notes");
        jLabel1.setAlignmentX(0.5F);

        CreateNewNoteButton.setText("Create New Note");
        CreateNewNoteButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                CreateNewNoteButtonMouseClicked(evt);
            }
        });
        CreateNewNoteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CreateNewNoteButtonActionPerformed(evt);
            }
        });

        DeleteNoteButton.setText("Delete Note");
        DeleteNoteButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                DeleteNoteButtonMouseClicked(evt);
            }
        });
        DeleteNoteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteNoteButtonActionPerformed(evt);
            }
        });

        DiplayAllNotesButton.setText("Diplay All Notes");
        DiplayAllNotesButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                DiplayAllNotesButtonMouseClicked(evt);
            }
        });
        DiplayAllNotesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
             //   DiplayAllNotesButtonActionPerformed(evt);
            }
        });

        SeeNoteutton.setText("See a Note");
        SeeNoteutton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                SeeNoteuttonMouseClicked(evt);
            }
        });
        SeeNoteutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SeeNoteuttonActionPerformed(evt);
            }
        });

        SortNotesButton.setText("Sort Notes");
        SortNotesButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                SortNotesButtonMouseClicked(evt);
            }
        });
        SortNotesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SortNotesButtonActionPerformed(evt);
            }
        });

        SearchNotesButton.setText("Search Notes");
        SearchNotesButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                SearchNotesButtonMouseClicked(evt);
            }
        });
        SearchNotesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchNotesButtonActionPerformed(evt);
            }
        });

        BackButton.setText("Back");
        BackButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BackButtonMouseClicked(evt);
            }
        });
        BackButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(NotesList, javax.swing.GroupLayout.PREFERRED_SIZE, 253, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(BackButton, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(CreateNewNoteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(DeleteNoteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(DiplayAllNotesButton, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(SeeNoteutton, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(SortNotesButton, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(SearchNotesButton, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(NotesList, javax.swing.GroupLayout.PREFERRED_SIZE, 338, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(CreateNewNoteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(DeleteNoteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(DiplayAllNotesButton, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(SeeNoteutton, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(SortNotesButton, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(SearchNotesButton, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BackButton, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(19, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
            String userID = DataStructures.UserSession.getUserID();

    private void CreateNewNoteButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CreateNewNoteButtonMouseClicked
       JFrame frame = new NewNote();
        frame.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_CreateNewNoteButtonMouseClicked

    private void CreateNewNoteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CreateNewNoteButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CreateNewNoteButtonActionPerformed
    private void DeleteNoteButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_DeleteNoteButtonMouseClicked
         int index = NotesList.getSelectedIndex();
    if (index == -1) {
        Controllers.Dialogues.showMessage("Please select a note");
    } else {
    Connection connection = null;
    ResultSet resultSet = null;
    try {
        // Step 1: Connect to the Postgresql database using JDBC driver
        Class.forName("org.postgresql.Driver");
        connection = DriverManager.getConnection("jdbc:postgresql://localhost:5432/postgres", "postgres", "postgres");

        // Get the selected item from the list
        String selectedItem = NotesList.getSelectedItem();
        String StrDate = selectedItem.substring(0, selectedItem.indexOf(" "));
        SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
        Date mDate = format.parse(StrDate);
       // String noteTitle = selectedItem.substring(11, StrDate.length() - 1);
        String noteTitle = selectedItem.substring(12);
        // Prepare the SQL query to delete the corresponding row from the database
        String sql = "DELETE FROM scheduling.studentnotes WHERE studentid = ? AND date = ? AND notetitle = ?";
        PreparedStatement statement = connection.prepareStatement(sql);
        statement.setString(1, userID);
        statement.setDate(2, new java.sql.Date(mDate.getTime()));
        statement.setString(3, noteTitle);
        statement.executeUpdate();
    } 
    catch (SQLException e) {
            System.out.println(e.getMessage());
        } catch (ClassNotFoundException | ParseException ex) {
            Controllers.Dialogues.showMessage("Error occured while deleting");
        }
    //catch (Exception e){
    //e.printStackTrace();
      //  Controllers.Dialogues.showMessage("Error deleting note");}
    try{
        Class.forName("org.postgresql.Driver");
        connection = DriverManager.getConnection("jdbc:postgresql://localhost:5432/postgres", "postgres", "postgres");

        // Prepare the SQL query to retrieve the remaining notes
        String sql1 = "SELECT notetitle, date, notebody FROM scheduling.studentnotes WHERE studentid = ?";
        PreparedStatement statement1 = connection.prepareStatement(sql1);
        statement1.setString(1, userID);

        // Execute the query and retrieve the results
        resultSet = statement1.executeQuery();
        NotesList.removeAll();
        while (resultSet.next()) {
            String title = resultSet.getString("notetitle");
            String date = resultSet.getString("date");
           // String body = resultSet.getString("notebody");
            String listItem = date + "  " + title;
            NotesList.add(listItem);
        }
    }
    catch (Exception e) {
        e.printStackTrace();
        Controllers.Dialogues.showMessage("Error deleting note");
    } finally {
        try {
            // Close the result set and database connection
            if (resultSet != null) {
                resultSet.close();
            }
            if (connection != null) {
                connection.close();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    }


      
    }//GEN-LAST:event_DeleteNoteButtonMouseClicked

    private void DeleteNoteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteNoteButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_DeleteNoteButtonActionPerformed

    private void DiplayAllNotesButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_DiplayAllNotesButtonMouseClicked
         NotesList.removeAll();
           try {
        // Get the user ID of the logged-in user
        String userID = DataStructures.UserSession.getUserID();

        // Connect to the database
        Connection connection = DriverManager.getConnection(
                "jdbc:postgresql://localhost:5432/postgres", "postgres", "postgres");

        // Prepare the SQL query
        String sql = "SELECT notetitle, date, notebody FROM scheduling.studentnotes WHERE studentid = '" + userID + "'";
        PreparedStatement statement = connection.prepareStatement(sql);
        // Execute the query and retrieve the results
        ResultSet result = statement.executeQuery();
        while (result.next()) {
            String title = result.getString("notetitle");
            String date = result.getString("date");
            String body = result.getString("notebody");
            String listItem = date + "  " + title  ;
            NotesList.add(listItem);
        }

        if (NotesList.getItemCount() == 0) {
            Controllers.Dialogues.showMessage("No available notes");
        }
        } catch (SQLException ex) {
            Controllers.Dialogues.showMessage("Error occured wile displaying notes");
      }

    }//GEN-LAST:event_DiplayAllNotesButtonMouseClicked
       
    private void SeeNoteuttonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SeeNoteuttonMouseClicked
        int index = NotesList.getSelectedIndex();
        if (index == -1) {
            Controllers.Dialogues.showMessage("Please select a note");
              } else {
        String selectedItem = NotesList.getSelectedItem();
        String StrDate = selectedItem.substring(0, selectedItem.indexOf(" "));
        String noteTitle = selectedItem.substring(StrDate.length() + 2);
        SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");

        try {
            Connection connection = DriverManager.getConnection("jdbc:postgresql://localhost:5432/postgres", "postgres", "postgres");
               // Prepare the SQL query to retrieve the note from the database
            String sql = "SELECT notetitle, date, notebody FROM scheduling.studentnotes WHERE studentid = ? AND date = ? AND notetitle = ?";
            java.sql.Date Date   =  new java.sql.Date(format.parse(StrDate).getTime()) ;
            PreparedStatement statement = connection.prepareStatement(sql);
            statement.setString(1, DataStructures.UserSession.getUserID());
            statement.setDate(2, Date);
            statement.setString(3, noteTitle);
            ResultSet resultSet = statement.executeQuery();
            if (resultSet.next()) {
                String title = resultSet.getString("notetitle");
                String date = resultSet.getString("date");
                String body = resultSet.getString("notebody");
                Dialogues dialogues = new Dialogues();
                dialogues.DisplayNote(title, date, body, NotesList);
                

            } else {
                Controllers.Dialogues.showMessage("Note not found");
            }
            resultSet.close();
            statement.close();
            connection.close();
        } catch (Exception e) {
            e.printStackTrace();
            Controllers.Dialogues.showMessage("Error displaying note");
        }
    }

    }//GEN-LAST:event_SeeNoteuttonMouseClicked
    
    private void SeeNoteuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SeeNoteuttonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_SeeNoteuttonActionPerformed

    private void SortNotesButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SortNotesButtonMouseClicked
      if (NotesList.getItemCount() == 0) {
    Controllers.Dialogues.showMessage("No notes have been created yet");
} else {
    try {
        // Create an array of options for the user to choose from to sort their meetings
        final String[] options = {"Sort Latest first", "Sort Oldest first", "Sort Alphabetically"};
        // Display a dialog to ask the user how they would like to sort their notes
        String choice = Controllers.Dialogues.showOptions(
                "How would you like to sort your notes?",
                options);

        // Check if the user made a choice
        if (choice == null || choice.equals("")) {
            // If no choice was made, return
            return;
        }

        Connection connection = DriverManager.getConnection(
                "jdbc:postgresql://localhost:5432/postgres", "postgres", "postgres");
        LocalDate currentDate = LocalDate.now();

        if (choice.equalsIgnoreCase(options[0])) {
            // If the user chose to sort by latest date, set the type of sorting to be by latest date
            DataStructures.DataStructures.type = DataStructures.DataStructures.type_Latest;
            System.out.println("first choice");
            // Define the SQL statement to retrieve the "notetitle" and "date" columns where the studentid is appropriate
            String sql = "SELECT notetitle, date FROM scheduling.studentnotes WHERE studentid = ? ORDER BY date DESC";
            PreparedStatement statement = connection.prepareStatement(sql);
            statement.setString(1, DataStructures.UserSession.getUserID());
            ResultSet resultSet = statement.executeQuery();

            NotesList.removeAll();
            while (resultSet.next()) {
                String title = resultSet.getString("notetitle");
                Date date = resultSet.getDate("date");
                NotesList.add(date.toString() + " " + title);
            }

        } else if (choice.equalsIgnoreCase(options[1])) {
            // If the user chose to sort by oldest date, set the type of sorting to be by oldest date
            DataStructures.DataStructures.type = DataStructures.DataStructures.type_Oldest;

            // Define the SQL statement to retrieve the "notetitle" and "date" columns where the studentid is appropriate
            String sql = "SELECT notetitle, date FROM scheduling.studentnotes WHERE studentid = ? ORDER BY date ASC";
            PreparedStatement statement = connection.prepareStatement(sql);
            statement.setString(1, DataStructures.UserSession.getUserID());
            ResultSet resultSet = statement.executeQuery();

            NotesList.removeAll();
            while (resultSet.next()) {
                String title = resultSet.getString("notetitle");
                Date date = resultSet.getDate("date");
                NotesList.add(date.toString() + " " + title);
            }
        } else if (choice.equalsIgnoreCase(options[2])) {
            // If the user chose to sort alphabetically, set the type of sorting to be alphabetically
            DataStructures.DataStructures.type = DataStructures.DataStructures.type_Alphabetical;
            // Define the SQL statement to retrieve the "notetitle" and "date" columns where the studentid is appropriate
            String sql = "SELECT notetitle, date FROM scheduling.studentnotes WHERE studentid = ? ORDER BY notetitle ASC";
            PreparedStatement statement = connection.prepareStatement(sql);
            statement.setString(1, DataStructures.UserSession.getUserID());
            ResultSet resultSet = statement.executeQuery();
            NotesList.removeAll();
            while (resultSet.next()) {
                String title = resultSet.getString("notetitle");
                Date date = resultSet.getDate("date");
                NotesList.add( date.toString()+ " " + title );
            }
        }
    } catch (SQLException ex) {
        ex.printStackTrace();
    }
}



    }//GEN-LAST:event_SortNotesButtonMouseClicked

    private void SortNotesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SortNotesButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_SortNotesButtonActionPerformed

    private void SearchNotesButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SearchNotesButtonMouseClicked
        if (NotesList.getItemCount() == 0) {
            Controllers.Dialogues.showMessage("No notes have been created yet");
        } else {
        String target = Controllers.Dialogues.InputMessage("Please enter a word or date to search for");

        // Step 1: Connect to the Postgresql database using JDBC driver
        Connection connection = null;
        ResultSet resultSet = null;

        try {
            Class.forName("org.postgresql.Driver");
            connection = DriverManager.getConnection("jdbc:postgresql://localhost:5432/postgres", "postgres", "postgres");

            // Step 2: Prepare the SQL query based on the user's search input
            String sql = "SELECT notetitle, date, notebody FROM scheduling.studentnotes WHERE studentid = ? AND (notetitle LIKE ? )";
            PreparedStatement statement = connection.prepareStatement(sql);
            statement.setString(1, DataStructures.UserSession.getUserID());
            statement.setString(2, "%" + target + "%");
            // Step 3: Execute the query and retrieve the results
            resultSet = statement.executeQuery();
            NotesList.removeAll();
            while (resultSet.next()) {
                String title = resultSet.getString("notetitle");
                String date = resultSet.getString("date");
                String body = resultSet.getString("notebody");
                String listItem = date + "  " + title;
                NotesList.add(listItem);
            }
        } catch (Exception e) {
            e.printStackTrace();
            Controllers.Dialogues.showMessage("Error searching notes");
        } finally {
            try {
                // Step 4: Close the result set and database connection
                if (resultSet != null) {
                    resultSet.close();
                }
                if (connection != null) {
                    connection.close();
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    }//GEN-LAST:event_SearchNotesButtonMouseClicked

    private void SearchNotesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchNotesButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_SearchNotesButtonActionPerformed

    private void BackButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BackButtonMouseClicked
        JFrame frame = new MainMenuUI();
        frame.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_BackButtonMouseClicked

    private void BackButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackButtonActionPerformed

    }//GEN-LAST:event_BackButtonActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
         try {
        // Get the user ID of the logged-in user
        String userID = DataStructures.UserSession.getUserID();

        // Connect to the database
        Connection connection = DriverManager.getConnection(
                "jdbc:postgresql://localhost:5432/postgres", "postgres", "postgres");

        // Prepare the SQL query
        String sql = "SELECT notetitle, date, notebody FROM scheduling.studentnotes WHERE studentid = '" + userID + "'";
        PreparedStatement statement = connection.prepareStatement(sql);
        // Execute the query and retrieve the results
        ResultSet result = statement.executeQuery();
        while (result.next()) {
            String title = result.getString("notetitle");
            String date = result.getString("date");
            String body = result.getString("notebody");
            String listItem = date + "  " + title  ;
            NotesList.add(listItem);
        }

        if (NotesList.getItemCount() == 0) {
            Controllers.Dialogues.showMessage("No available notes");
        }
        } catch (SQLException ex) {
            Controllers.Dialogues.showMessage("Error occured while opening widnow");
      }

    }//GEN-LAST:event_formWindowOpened

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Notes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Notes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Notes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Notes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Notes().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BackButton;
    private javax.swing.JButton CreateNewNoteButton;
    private javax.swing.JButton DeleteNoteButton;
    private javax.swing.JButton DiplayAllNotesButton;
    private java.awt.List NotesList;
    private javax.swing.JButton SearchNotesButton;
    private javax.swing.JButton SeeNoteutton;
    private javax.swing.JButton SortNotesButton;
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables

    public void Closing() {
        this.dispose();
    }
}
