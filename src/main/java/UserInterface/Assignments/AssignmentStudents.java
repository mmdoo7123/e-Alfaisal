package UserInterface.Assignments;

import DataStructures.DataStructures;
import UserInterface.MainMenuUI;

import javax.swing.*;
import java.sql.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.util.Date;


public class AssignmentStudents extends javax.swing.JFrame {

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel AssignmentsLabel;
    private java.awt.List AssignmentsList;
    private javax.swing.JButton BackButton;
    private javax.swing.JButton DisplayAllAssignmentsButton;
    private javax.swing.JButton SearchAssignmentsButton;
    private javax.swing.JButton SortAssignmentsButton;

    /**
     * Creates new form AssignmentStudents
     */
    public AssignmentStudents() {
        initComponents();
        this.setLocationRelativeTo(null);
        this.setVisible(true);
        this.setResizable(false);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AssignmentStudents.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AssignmentStudents.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AssignmentStudents.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AssignmentStudents.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AssignmentStudents().setVisible(true);
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        AssignmentsLabel = new javax.swing.JLabel();
        AssignmentsList = new java.awt.List();
        SearchAssignmentsButton = new javax.swing.JButton();
        SortAssignmentsButton = new javax.swing.JButton();
        BackButton = new javax.swing.JButton();
        DisplayAllAssignmentsButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        AssignmentsLabel.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        AssignmentsLabel.setText("Here are your assignments");

        SearchAssignmentsButton.setText("Search Assignments");
        SearchAssignmentsButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                SearchAssignmentsButtonMouseClicked(evt);
            }
        });

        SortAssignmentsButton.setText("Sort Assignments");
        SortAssignmentsButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                SortAssignmentsButtonMouseClicked(evt);
            }
        });

        BackButton.setText("Back");
        BackButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BackButtonMouseClicked(evt);
            }
        });

        DisplayAllAssignmentsButton.setText("Display All");
        DisplayAllAssignmentsButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                DisplayAllAssignmentsButtonMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(89, 89, 89)
                                .addComponent(AssignmentsList, javax.swing.GroupLayout.PREFERRED_SIZE, 289, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addContainerGap(18, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(DisplayAllAssignmentsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(SortAssignmentsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(SearchAssignmentsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addContainerGap())
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                        .addComponent(AssignmentsLabel)
                                                        .addGap(46, 46, 46))
                                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                        .addComponent(BackButton, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addContainerGap()))))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(AssignmentsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(AssignmentsList, javax.swing.GroupLayout.PREFERRED_SIZE, 336, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(27, 27, 27)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(SortAssignmentsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(SearchAssignmentsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(DisplayAllAssignmentsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addComponent(BackButton, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(8, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void SearchAssignmentsButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SearchAssignmentsButtonMouseClicked
        if (AssignmentsList.getItemCount() == 0) {
            Controllers.Dialogues.showMessage("No notes have been created yet");
        } else {
            String target = Controllers.Dialogues.InputMessage("Please enter a word or date to search for");
            if (target == null || target.equals("")) {
            } else {
                // Step 1: Connect to the Postgresql database using JDBC driver
                Connection connection = null;
                ResultSet resultSet = null;

                try {
                    Class.forName("org.postgresql.Driver");
                    connection = DriverManager.getConnection("jdbc:postgresql://localhost:5432/postgres", "postgres", "postgres");

                    // Step 2: Prepare the SQL query based on the user's search input
                    String sql = "SELECT assignmenttitle, assignmentdeadline, assignmentdescription FROM scheduling.assignments WHERE LOWER(assignmenttitle) LIKE LOWER(?) OR LOWER(assignmentdescription) LIKE LOWER(?) OR LOWER(assignmenttitle || ' ' || assignmentdescription) LIKE LOWER(?) OR assignmentdeadline = ?";
                    PreparedStatement statement = connection.prepareStatement(sql);
                    statement.setString(1, "%" + target + "%");
                    statement.setString(2, "%" + target + "%");
                    statement.setString(3, "%" + target + "%");
                    SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
                    try {
                        Date mDate = format.parse(target);
                        statement.setDate(4, new java.sql.Date(mDate.getTime()));
                    } catch (ParseException e) {
                        statement.setDate(4, null);
                    }

                    // Step 3: Execute the query and retrieve the results
                    resultSet = statement.executeQuery();
                    AssignmentsList.removeAll();
                    while (resultSet.next()) {
                        String title = resultSet.getString("assignmenttitle");
                        String dateStr = resultSet.getString("assignmentdeadline");
                        String body = resultSet.getString("assignmentdescription");

                        // parse the deadline date string to a Date object
                        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
                        Date deadlineDate = dateFormat.parse(dateStr);

                        // compare the deadline with today's date
                        if (deadlineDate.before(new Date())) {
                            // if the deadline is before today's date, add "past due" to the list item string
                            AssignmentsList.add("* PAST DUE *  " + dateStr + "  " + title);
                        } else {
                            // otherwise, add the regular list item string
                            AssignmentsList.add(dateStr + "  " + title);
                        }
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                    Controllers.Dialogues.showMessage("Error searching notes");
                } finally {
                    try {
                        // Step 4: Close the result set and database connection
                        if (resultSet != null) {
                            resultSet.close();
                        }
                        if (connection != null) {
                            connection.close();
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
            }
        }


    }//GEN-LAST:event_SearchAssignmentsButtonMouseClicked

    private void SortAssignmentsButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SortAssignmentsButtonMouseClicked
        if (AssignmentsList.getItemCount() == 0) {
            Controllers.Dialogues.showMessage("No notes have been created yet");
        } else {
            try {
                // Create an array of options for the user to choose from to sort their meetings
                final String[] options = {"Sort Latest first", "Sort Oldest first", "Sort Alphabetically"};
                // Display a dialog to ask the user how they would like to sort their notes
                String choice = Controllers.Dialogues.showOptions(
                        "How would you like to sort your notes?",
                        options);

                // Check if the user made a choice
                if (choice == null || choice.equals("")) {
                    // If no choice was made, return
                    return;
                }

                Connection connection = DriverManager.getConnection(
                        "jdbc:postgresql://localhost:5432/postgres", "postgres", "postgres");
                LocalDate currentDate = LocalDate.now();

                if (choice.equalsIgnoreCase(options[0])) {
                    // If the user chose to sort by latest date, set the type of sorting to be by latest date
                    DataStructures.type = DataStructures.type_Latest;

                    // Define the SQL statement to retrieve the "notetitle" and "date" columns where the studentid is appropriate
                    String sql = "SELECT assignmenttitle, assignmentdeadline  FROM scheduling.assignments ORDER BY assignmentdeadline DESC";
                    PreparedStatement statement = connection.prepareStatement(sql);
                    ResultSet resultSet = statement.executeQuery();
                    AssignmentsList.removeAll();
                    while (resultSet.next()) {
                        String title = resultSet.getString("assignmenttitle");
                        Date date = resultSet.getDate("assignmentdeadline");
                        String listItem = date.toString() + " " + title;

                        AssignmentsList.add(listItem);
                    }

                } else if (choice.equalsIgnoreCase(options[1])) {
                    // If the user chose to sort by oldest date, set the type of sorting to be by oldest date
                    DataStructures.type = DataStructures.type_Oldest;

                    // Define the SQL statement to retrieve the "notetitle" and "date" columns where the studentid is appropriate
                    String sql = "SELECT assignmenttitle, assignmentdeadline  FROM scheduling.assignments ORDER BY assignmentdeadline ASC";
                    PreparedStatement statement = connection.prepareStatement(sql);
                    ResultSet resultSet = statement.executeQuery();
                    AssignmentsList.removeAll();
                    while (resultSet.next()) {
                        String title = resultSet.getString("assignmenttitle");
                        Date date = resultSet.getDate("assignmentdeadline");
                        String listItem = date.toString() + " " + title;
                        listItem = date.toString() + " " + title;

                        AssignmentsList.add(listItem);
                    }
                } else if (choice.equalsIgnoreCase(options[2])) {
                    // If the user chose to sort alphabetically, set the type of sorting to be alphabetical
                    DataStructures.type = DataStructures.type_Alphabetical;
                    // Define the SQL statement to retrieve the "notetitle" and "date" columns where the studentid is appropriate
                    String sql = "SELECT assignmenttitle, assignmentdeadline  FROM scheduling.assignments ORDER BY assignmenttitle ASC";
                    PreparedStatement statement = connection.prepareStatement(sql);
                    ResultSet resultSet = statement.executeQuery();
                    AssignmentsList.removeAll();
                    while (resultSet.next()) {
                        String title = resultSet.getString("assignmenttitle");
                        Date date = resultSet.getDate("assignmentdeadline");
                        String listItem = date.toString() + " " + title;
                        listItem = date.toString() + " " + title;

                        AssignmentsList.add(listItem);
                    }

                }
            } catch (SQLException ex) {
                ex.printStackTrace();
                Controllers.Dialogues.showMessage("Error occured when sorting");

            }
        }

    }//GEN-LAST:event_SortAssignmentsButtonMouseClicked

    private void BackButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BackButtonMouseClicked
        JFrame frame = new MainMenuUI();
        frame.setVisible(true);
        this.setVisible(false);

    }//GEN-LAST:event_BackButtonMouseClicked

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        try {
            // Connect to the database
            Connection connection = DriverManager.getConnection(
                    "jdbc:postgresql://localhost:5432/postgres", "postgres", "postgres");

            // Prepare the SQL query
            String sql = "SELECT assignmenttitle, assignmentdeadline, assignmentdescription FROM scheduling.assignments";
            PreparedStatement statement = connection.prepareStatement(sql);

            // Execute the query and retrieve the results
            ResultSet result = statement.executeQuery();
            AssignmentsList.removeAll();
            while (result.next()) {
                String title = result.getString("assignmenttitle");
                String deadlineString = result.getString("assignmentdeadline");
                String body = result.getString("assignmentdescription");

                // Convert the deadline string to a LocalDate object
                LocalDate deadline = LocalDate.parse(deadlineString);
                LocalDate today = LocalDate.now();

                // If the deadline is before today's date, add "PAST DUE" to the list item
                if (deadline.isBefore(today)) {
                    String listItem = deadlineString + " " + title + "* PAST DUE *";
                    AssignmentsList.add(listItem);
                } else {
                    AssignmentsList.add(deadlineString + " " + title);
                }
            }

            if (AssignmentsList.getItemCount() == 0) {
                Controllers.Dialogues.showMessage("No available assignments");
            }
        } catch (SQLException ex) {
            Controllers.Dialogues.showMessage("Error occured while opening the window");
        }


    }//GEN-LAST:event_formWindowOpened

    private void DisplayAllAssignmentsButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_DisplayAllAssignmentsButtonMouseClicked
        try {
            // Connect to the database
            Connection connection = DriverManager.getConnection(
                    "jdbc:postgresql://localhost:5432/postgres", "postgres", "postgres");

            // Prepare the SQL query
            String sql = "SELECT assignmenttitle, assignmentdeadline, assignmentdescription FROM scheduling.assignments";
            PreparedStatement statement = connection.prepareStatement(sql);

            // Execute the query and retrieve the results
            ResultSet result = statement.executeQuery();
            AssignmentsList.removeAll();
            while (result.next()) {
                String title = result.getString("assignmenttitle");
                String deadlineString = result.getString("assignmentdeadline");
                String body = result.getString("assignmentdescription");

                // Convert the deadline string to a LocalDate object
                LocalDate deadline = LocalDate.parse(deadlineString);
                LocalDate today = LocalDate.now();

                // If the deadline is before today's date, add "PAST DUE" to the list item
                if (deadline.isBefore(today)) {
                    String listItem = deadlineString + " " + title + "* PAST DUE *";
                    AssignmentsList.add(listItem);
                } else {
                    AssignmentsList.add(deadlineString + " " + title);
                }
            }

            if (AssignmentsList.getItemCount() == 0) {
                Controllers.Dialogues.showMessage("No available assignments");
            }
        } catch (SQLException ex) {
            Controllers.Dialogues.showMessage("Error occured while diplaying the assignments");
        }


    }//GEN-LAST:event_DisplayAllAssignmentsButtonMouseClicked
    // End of variables declaration//GEN-END:variables
}
