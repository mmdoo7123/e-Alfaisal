package UserInterface;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.ArrayList;

public class LibraryUI extends javax.swing.JFrame {
    // Variables declaration - do not modify                     
    private javax.swing.JButton BackButton;
    private javax.swing.JTextField BookTextField;
    private java.awt.List BooksList;
    private javax.swing.JLabel ResourcesLabel;
    private javax.swing.JButton SearchButton;
    private javax.swing.JButton SortButton;

    /**
     * Creates new form LibraryUI
     */
    public LibraryUI() {
        initComponents();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws InstantiationException {

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new LibraryUI().setVisible(true);
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ResourcesLabel = new javax.swing.JLabel();
        BookTextField = new javax.swing.JTextField();
        SearchButton = new javax.swing.JButton();
        BooksList = new java.awt.List();
        SortButton = new javax.swing.JButton();
        BackButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        ResourcesLabel.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        ResourcesLabel.setText("Here is a list of all the resources you can access");

        BookTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        BookTextField.setText("Type a website/book");

        SearchButton.setText("Search");
        SearchButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                SearchButtonMouseClicked(evt);
            }
        });

        SortButton.setText("Sort");
        SortButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                SortButtonMouseClicked(evt);
            }
        });

        BackButton.setText("Back");
        BackButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BackButtonMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(ResourcesLabel)
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addComponent(BookTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                                .addComponent(SearchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(BooksList, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(SortButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(BackButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGap(14, 14, 14))))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(ResourcesLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(BookTextField)
                                        .addComponent(SearchButton, javax.swing.GroupLayout.DEFAULT_SIZE, 43, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(BooksList, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(SortButton, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 93, Short.MAX_VALUE)
                                                .addComponent(BackButton, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /*The "SearchButtonMouseClicked" method is triggered when a mouse click is
        detected on the "Search" button. The method retrieves the text entered
        in the "BookTextField" and checks if it is empty. If it is, it displays
        an output message telling the user to enter a name to search for. If it is
        not empty, the method calls the "search" method from the "LibraryController"
        class and passes the "BooksList" and target variables as arguments.    */
    private void SearchButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SearchButtonMouseClicked
        String target = BookTextField.getText().trim();

        if (target == null || target.equals("")) {
            Controllers.Dialogues.showMessage("Please enter a name to search for");
        } else {
            var foundList = new ArrayList<String>();
            boolean found = false;
            for (int i = 0; i < BooksList.getItemCount(); i++) {
                String resource = BooksList.getItem(i);
                if (resource.toLowerCase().contains(target.toLowerCase())) {
                    found = true;
                    foundList.add(resource);
                }
            }
            BooksList.removeAll();
            for (String resource : foundList) {
                BooksList.add(resource);
            }
            if (!found) {
                Controllers.Dialogues.showMessage("No resources are available with that name");
            }
        }
    }//GEN-LAST:event_SearchButtonMouseClicked

    /*The "SortButtonMouseClicked" method is triggered when a mouse click is
        detected on the "Sort" button. The method checks if there are any items
        in the "BooksList." If there are no items, it displays an output message
        telling the user that no resources are available yet. If there are items,
        the method sorts the list using the selection sort algorithm.*/
    private void SortButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SortButtonMouseClicked
        if (BooksList.getItemCount() == 0) {
            Controllers.Dialogues.showMessage("No resources are available yet");
        } else {
            for (int i = 0; i < BooksList.getItemCount() - 1; i++) {
                // Find the minimum element in unsorted array
                int minIndex = i;
                for (int j = i + 1; j < BooksList.getItemCount(); j++) {
                    if (BooksList.getItem(j).compareTo(BooksList.getItem(minIndex)) < 0) {
                        minIndex = j;
                    }
                }
                // Swap the found minimum element with the first element
                String temp = BooksList.getItem(i);
                BooksList.replaceItem(BooksList.getItem(minIndex), i);
                BooksList.replaceItem(temp, minIndex);
            }
        }
    }//GEN-LAST:event_SortButtonMouseClicked

    /*The "BackButtonMouseClicked" method is triggered when a mouse click is
        detected on the "Back" button. The method creates a new instance of the
        "MainMenu" class and sets it to be visible. It then sets the current
        "LibraryUI" instance to be invisible.       */
    private void BackButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BackButtonMouseClicked
        JFrame frame = new MainMenuUI();
        frame.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_BackButtonMouseClicked

    /*The "formWindowOpened" method is triggered when the window is opened.
        The method adds various books to the "BooksList" and sets the cursor
        to a hand cursor. It also adds an "ItemListener" that listens for any
        changes in the selected item. When a change is detected, the method opens
        the corresponding link for the selected item in the default web browser.  */
    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        BooksList.add("Comp Sci");
        BooksList.add("GapMinder");
        BooksList.add("Higher Level Chemistry");
        BooksList.add("Connected papers");
        BooksList.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        BooksList.addItemListener(new ItemListener() {
            @Override
            public void itemStateChanged(ItemEvent e) {
                if (e.getStateChange() == ItemEvent.SELECTED) {
                    String selectedItem = BooksList.getSelectedItem();
                    if (selectedItem.equals("Comp Sci")) {
                        try {
                            Desktop.getDesktop().browse(new URI(
                                    "https://www.amphi.com/cms/lib/AZ01901095/Centricity/Domain/4423/IB%20Computer%20Science%20Internal%20Assessment.pdf"));
                        } catch (IOException | URISyntaxException ex) {
                            ex.printStackTrace();
                        }
                    } else if (selectedItem.equals("GapMinder")) {
                        try {
                            Desktop.getDesktop().browse(new URI(
                                    "https://www.gapminder.org/"));
                        } catch (IOException | URISyntaxException ex) {
                            ex.printStackTrace();
                        }
                    } else if (selectedItem.equals("Higher Level Chemistry")) {
                        try {
                            Desktop.getDesktop().browse(new URI(
                                    "file:///C:/Users/mahmo/Downloads/Chemistry%20HL%20-%20Catrin%20Brown%20and%20Mike%20Ford%20-%20Second%20Edition%20-%20Pearson%202014%20(1)%20(1).pdf"));
                        } catch (IOException | URISyntaxException ex) {
                            ex.printStackTrace();
                        }
                    } else if (selectedItem.equals("Connected papers")) {
                        try {
                            Desktop.getDesktop().browse(new URI("https://www.connectedpapers.com/"));
                        } catch (IOException | URISyntaxException ex) {
                            ex.printStackTrace();
                        }
                    }
                }
            }
        });
    }//GEN-LAST:event_formWindowOpened
}
