package AdminInterface;

import javax.swing.*;
import java.sql.*;
import java.text.SimpleDateFormat;
import java.util.Date;

public class MeetingRequests extends javax.swing.JFrame {
    String userID = UserInterface.UserSession.getInstance().getUserID();
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AcceptSelectedRequestButton;
    private javax.swing.JButton BackButton;
    private javax.swing.JButton DenySelectedRequestButton;
    private java.awt.List MeetingRequestList;
    private javax.swing.JLabel MeetingsRequestLabel;

    /**
     * Creates new form MeetingRequests
     */
    public MeetingRequests() {
        initComponents();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MeetingRequests.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MeetingRequests.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MeetingRequests.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MeetingRequests.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MeetingRequests().setVisible(true);
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        MeetingRequestList = new java.awt.List();
        MeetingsRequestLabel = new javax.swing.JLabel();
        AcceptSelectedRequestButton = new javax.swing.JButton();
        DenySelectedRequestButton = new javax.swing.JButton();
        BackButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        MeetingsRequestLabel.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        MeetingsRequestLabel.setText("Here are your meeting requests");

        AcceptSelectedRequestButton.setText("Accept Selected Request");
        AcceptSelectedRequestButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                AcceptSelectedRequestButtonMouseClicked(evt);
            }
        });
        AcceptSelectedRequestButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AcceptSelectedRequestButtonActionPerformed(evt);
            }
        });

        DenySelectedRequestButton.setText("Deny Selected Request");
        DenySelectedRequestButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                DenySelectedRequestButtonMouseClicked(evt);
            }
        });

        BackButton.setText("Back");
        BackButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BackButtonMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(MeetingsRequestLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 355, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(MeetingRequestList, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                .addComponent(AcceptSelectedRequestButton, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addComponent(DenySelectedRequestButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                        .addComponent(BackButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(MeetingsRequestLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addGap(45, 45, 45)
                                                .addComponent(AcceptSelectedRequestButton, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(DenySelectedRequestButton, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(BackButton, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addContainerGap())
                                        .addGroup(layout.createSequentialGroup()
                                                .addGap(1, 1, 1)
                                                .addComponent(MeetingRequestList, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void AcceptSelectedRequestButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_AcceptSelectedRequestButtonMouseClicked
        if (MeetingRequestList.getSelectedItem() == null) {
            System.out.print("please select a meeting request");
        } else {
            Connection connection = null;
            ResultSet resultSet = null;
            try {
// Step 1: Connect to the Postgresql database using JDBC driver
                Class.forName("org.postgresql.Driver");
                connection = DriverManager.getConnection("jdbc:postgresql://localhost:5432/postgres", "postgres", "postgres");
                String row = MeetingRequestList.getSelectedItem();
                String StrDate = row.substring(0, row.indexOf(" "));
                SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
                Date mDate = format.parse(StrDate);
                String Stdid = row.substring(StrDate.length() + 1, StrDate.length() + 9);
                MeetingRequestList.removeAll();
                // Prepare the SQL query to update the status column for a student meeting
                String sql1 = "UPDATE scheduling.studentmeetings SET status = 2 WHERE status = 1 AND studentid = ? AND meetingdate = ?";
                PreparedStatement statement1 = connection.prepareStatement(sql1);

                // Set the values for the placeholder parameters in the SQL statement
                statement1.setString(1, Stdid);
                statement1.setDate(2, new java.sql.Date(mDate.getTime()));

                // Execute the SQL statement
                statement1.executeUpdate();

                // Prepare the SQL query to select all the records from the table where the status is 1
                String sql2 = "SELECT studentid,name,meetingdate FROM scheduling.studentmeetings, scheduling.scheduling_users WHERE status = 1 AND studentid = id";
                statement1 = connection.prepareStatement(sql2);
                resultSet = statement1.executeQuery();

                // Loop through the result set and add the meeting requests to the list
                while (resultSet.next()) {
                    String ID = resultSet.getString("studentid");
                    String name = resultSet.getString("name");
                    Date date = resultSet.getDate("meetingdate");
                    MeetingRequestList.add(date + " " + ID + " " + name);
                }
            } catch (Exception e) {
                e.printStackTrace();
            } finally {
                try {
                    // Step 7: Close the result set and database connection
                    resultSet.close();
                    connection.close();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }

    }//GEN-LAST:event_AcceptSelectedRequestButtonMouseClicked

    private void DenySelectedRequestButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_DenySelectedRequestButtonMouseClicked
        Connection connection = null;
        PreparedStatement statement = null;
        ResultSet resultSet = null;
        // Check if the selected item in the "MeetingRequestList" is not empty

        if (MeetingRequestList.getSelectedItem() != null) {
            try {
// Step 1: Connect to the Postgresql database using JDBC driver
                Class.forName("org.postgresql.Driver");
                connection = DriverManager.getConnection("jdbc:postgresql://localhost:5432/postgres", "postgres", "postgres");
                String row = MeetingRequestList.getSelectedItem();
                String StrDate = row.substring(0, row.indexOf(" "));
                SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
                Date mDate = format.parse(StrDate);
                String Stdid = row.substring(StrDate.length() + 1, StrDate.length() + 9);
                MeetingRequestList.removeAll();
                // Prepare the SQL query to update the status column for a student meeting
                String sql1 = "UPDATE scheduling.studentmeetings SET status = 4 WHERE status = 1 AND studentid = ? AND meetingdate = ?";
                PreparedStatement statement1 = connection.prepareStatement(sql1);

                // Set the values for the placeholder parameters in the SQL statement
                statement1.setString(1, Stdid);
                statement1.setDate(2, new java.sql.Date(mDate.getTime()));

                // Execute the SQL statement
                statement1.executeUpdate();

                // Prepare the SQL query to select all the records from the table where the status is 1
                String sql2 = "SELECT studentid,name,meetingdate FROM scheduling.studentmeetings, scheduling.scheduling_users WHERE status = 1 AND studentid = id";
                statement1 = connection.prepareStatement(sql2);
                resultSet = statement1.executeQuery();

                // Loop through the result set and add the meeting requests to the list
                while (resultSet.next()) {
                    String ID = resultSet.getString("studentid");
                    String name = resultSet.getString("name");
                    Date date = resultSet.getDate("meetingdate");
                    MeetingRequestList.add(date + " " + ID + " " + name);
                }
            } catch (Exception e) {
                e.printStackTrace();
            } finally {
                try {
                    // Step 7: Close the result set and database connection
                    resultSet.close();
                    connection.close();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        } else {
            Controllers.Dialogues.showMessage(
                    "please select a meeting request to accept");
        }

    }//GEN-LAST:event_DenySelectedRequestButtonMouseClicked

    private void BackButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BackButtonMouseClicked
        JFrame frame = new AdminMeetings();
        frame.setVisible(true);
        this.setVisible(false);


    }//GEN-LAST:event_BackButtonMouseClicked

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        Connection connection = null;
        Statement statement = null;
        ResultSet resultSet = null;

        try {
            // Step 1: Connect to the Postgresql database using JDBC driver
            Class.forName("org.postgresql.Driver");
            connection = DriverManager.getConnection("jdbc:postgresql://localhost:5432/postgres", "postgres", "postgres");

            // Step 2: Prepare an SQL query to select all the records from the table where the status is 1
            statement = connection.createStatement();
            String sql = "SELECT meetingdate ,studentid, name FROM scheduling.studentmeetings , scheduling.scheduling_users WHERE status = 1 AND studentid= id";
            resultSet = statement.executeQuery(sql);

            // Step 3: Loop through the result set and check if the conditions are met to change the status from 1 to 2
            while (resultSet.next()) {
                String ID = resultSet.getString("studentid");
                String name = resultSet.getString("name");
                Date date = resultSet.getDate("meetingdate");
                // if (date.toInstant().atZone(ZoneId.systemDefault()).toLocalDate().isAfter(LocalDate.now())) {
                // Step 4: If the conditions are met, prepare an SQL update query to update the status column with the value 3 for the corresponding studentid
                // String updateSql = "UPDATE studentmeetings SET status = 2 WHERE studentid = " + userID;
                //  statement.executeUpdate(updateSql);
                MeetingRequestList.add(date + " " + ID + " " + name);
            }

        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                // Step 7: Close the result set and database connection
                resultSet.close();
                statement.close();
                connection.close();
            } catch (Exception e) {
                e.printStackTrace();
            }


        }

    }//GEN-LAST:event_formWindowOpened

    private void AcceptSelectedRequestButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AcceptSelectedRequestButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_AcceptSelectedRequestButtonActionPerformed
    // End of variables declaration//GEN-END:variables
}
