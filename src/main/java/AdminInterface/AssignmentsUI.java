package AdminInterface;
// Import necessary libraries

import DataStructures.DataStructures;

import javax.swing.*;
import java.sql.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.util.Date;

import static Controllers.Dialogues.displayAssignment;

// Define the public class AssignmentsUI that extends javax.swing.JFrame
public class AssignmentsUI extends javax.swing.JFrame {
    // Variables declaration - do not modify                     
    protected java.awt.List AssignmentsPostedList;
    private AssignmentsUI Assignment;
    int[] indices = this.allIndices(Assignment);
    private javax.swing.JButton BackButton;
    private javax.swing.JButton DeleteAssignmentButton;
    private javax.swing.JButton DisplayAllAssignmentsButton;
    private javax.swing.JButton PostAssignmentButton;
    private javax.swing.JButton SearchAssignmentsButton;
    private javax.swing.JButton SortAssignmentsButton;
    private javax.swing.JButton ViewAssignmentButton;
    private javax.swing.JLabel jLabel1;

    public AssignmentsUI(String title, String date, String body) {

    }

    public AssignmentsUI() {
        initComponents();
        this.setLocationRelativeTo(null);
        this.setVisible(true);
        this.setResizable(false);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AssignmentsUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AssignmentsUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AssignmentsUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AssignmentsUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AssignmentsUI().setVisible(true);
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        AssignmentsPostedList = new java.awt.List();
        jLabel1 = new javax.swing.JLabel();
        SortAssignmentsButton = new javax.swing.JButton();
        SearchAssignmentsButton = new javax.swing.JButton();
        BackButton = new javax.swing.JButton();
        DisplayAllAssignmentsButton = new javax.swing.JButton();
        ViewAssignmentButton = new javax.swing.JButton();
        DeleteAssignmentButton = new javax.swing.JButton();
        PostAssignmentButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel1.setText("Here are assingments that you have posted");

        SortAssignmentsButton.setText("Sort Assignments");
        SortAssignmentsButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                SortAssignmentsButtonMouseClicked(evt);
            }
        });
        SortAssignmentsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SortAssignmentsButtonActionPerformed(evt);
            }
        });

        SearchAssignmentsButton.setText("Search Assignments");
        SearchAssignmentsButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                SearchAssignmentsButtonMouseClicked(evt);
            }
        });

        BackButton.setText("Back");
        BackButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BackButtonMouseClicked(evt);
            }
        });

        DisplayAllAssignmentsButton.setText("Display all");
        DisplayAllAssignmentsButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                DisplayAllAssignmentsButtonMouseClicked(evt);
            }
        });

        ViewAssignmentButton.setText("View  Selected Assignment");
        ViewAssignmentButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ViewAssignmentButtonMouseClicked(evt);
            }
        });

        DeleteAssignmentButton.setText("Delete an Assignment");
        DeleteAssignmentButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                DeleteAssignmentButtonMouseClicked(evt);
            }
        });

        PostAssignmentButton.setText("Post an assignment");
        PostAssignmentButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PostAssignmentButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addGap(19, 19, 19)
                                                .addComponent(jLabel1)
                                                .addGap(0, 0, Short.MAX_VALUE))
                                        .addGroup(layout.createSequentialGroup()
                                                .addContainerGap()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(BackButton, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(AssignmentsPostedList, javax.swing.GroupLayout.PREFERRED_SIZE, 331, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGap(19, 19, 19)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(DeleteAssignmentButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(ViewAssignmentButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(SearchAssignmentsButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(PostAssignmentButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(DisplayAllAssignmentsButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(SortAssignmentsButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                                .addContainerGap())
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(9, 9, 9)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(PostAssignmentButton, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(SearchAssignmentsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(DisplayAllAssignmentsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(ViewAssignmentButton, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(DeleteAssignmentButton, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(AssignmentsPostedList, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(SortAssignmentsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(BackButton, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addContainerGap(17, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // This method is called when the "Post Assignment" button is clicked. It creates and displays
// a new PostAssignment frame, and sets the visibility of the current frame to false.
    private void PostAssignmentButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PostAssignmentButtonActionPerformed
        JFrame frame = new PostAssignment();
        frame.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_PostAssignmentButtonActionPerformed

    // This method searches for a word in the "AssignmentsPostedList" and outputs an error message
// if no notes have been created yet.
    private void SearchAssignmentsButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SearchAssignmentsButtonMouseClicked
        if (AssignmentsPostedList.getItemCount() == 0) {
            Controllers.Dialogues.showMessage("No notes have been created yet");
        } else {
            String target = Controllers.Dialogues.InputMessage("Please enter a word or date to search for");
            if (target == null || target.equals("")) {
            } else {
                // Step 1: Connect to the Postgresql database using JDBC driver
                Connection connection = null;
                ResultSet resultSet = null;
                // Step 2: Prepare the SQL query based on the user's search input

                try {
                    Class.forName("org.postgresql.Driver");
                    connection = DriverManager.getConnection("jdbc:postgresql://localhost:5432/postgres", "postgres", "postgres");

                    String sql = "SELECT assignmenttitle, assignmentdeadline, assignmentdescription FROM scheduling.assignments WHERE LOWER(assignmenttitle) LIKE LOWER(?) OR LOWER(assignmentdescription) LIKE LOWER(?) OR LOWER(assignmenttitle || ' ' || assignmentdescription) LIKE LOWER(?) OR assignmentdeadline = ?";
                    PreparedStatement statement = connection.prepareStatement(sql);
                    statement.setString(1, "%" + target + "%");
                    statement.setString(2, "%" + target + "%");
                    statement.setString(3, "%" + target + "%");
                    SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
                    try {
                        Date mDate = format.parse(target);
                        statement.setDate(4, new java.sql.Date(mDate.getTime()));
                    } catch (ParseException e) {
                        statement.setDate(4, null);
                    }

                    // Step 3: Execute the query and retrieve the results
                    resultSet = statement.executeQuery();
                    AssignmentsPostedList.removeAll();
                    while (resultSet.next()) {
                        String title = resultSet.getString("assignmenttitle");
                        String date = resultSet.getString("assignmentdeadline");
                        String body = resultSet.getString("assignmentdescription");
                        String listItem = date + "  " + title;
                        AssignmentsPostedList.add(listItem);
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                    Controllers.Dialogues.showMessage("Error searching notes");
                } finally {
                    try {
                        // Step 4: Close the result set and database connection
                        if (resultSet != null) {
                            resultSet.close();
                        }
                        if (connection != null) {
                            connection.close();
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
            }
        }
    }//GEN-LAST:event_SearchAssignmentsButtonMouseClicked

    // This method displays all assignments in the "AssignmentsPostedList" and outputs an error message
// if there are no available assignments.
    private void DisplayAllAssignmentsButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_DisplayAllAssignmentsButtonMouseClicked
        AssignmentsPostedList.removeAll();
        try {
            // Connect to the database
            Connection connection = DriverManager.getConnection(
                    "jdbc:postgresql://localhost:5432/postgres", "postgres", "postgres");

            // Prepare the SQL query
            String sql = "SELECT assignmenttitle, assignmentdeadline, assignmentdescription FROM scheduling.assignments";
            PreparedStatement statement = connection.prepareStatement(sql);

            // Execute the query and retrieve the results
            ResultSet result = statement.executeQuery();
            while (result.next()) {
                String title = result.getString("assignmenttitle");
                String deadline = result.getString("assignmentdeadline");
                String body = result.getString("assignmentdescription");
                String listItem = deadline + "  " + title;
                AssignmentsPostedList.add(listItem);
            }

            if (AssignmentsPostedList.getItemCount() == 0) {
                Controllers.Dialogues.showMessage("No available assignments");
            }
        } catch (SQLException ex) {
            // Handle the exception here
        }


    }//GEN-LAST:event_DisplayAllAssignmentsButtonMouseClicked

    // This method is called when the "View Assignment" button is clicked
    private void ViewAssignmentButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ViewAssignmentButtonMouseClicked
        try {
            // Step 1: Connect to the Postgresql database using JDBC driver

            Connection connection = DriverManager.getConnection(
                    "jdbc:postgresql://localhost:5432/postgres", "postgres", "postgres");

            // Step 2: Prepare the SQL query to retrieve all assignments
            String sql = "SELECT assignmenttitle, assignmentdeadline, assignmentdescription FROM scheduling.assignments";
            PreparedStatement statement = connection.prepareStatement(sql);
            // Step 3: Execute the query and retrieve the results
            ResultSet result = statement.executeQuery();
            System.out.println("done");
            if (result.next()) {
                // Step 4: Extract the assignment information from the result set
                String title = result.getString("assignmenttitle");
                String deadline = result.getString("assignmentdeadline");
                String description = result.getString("assignmentdescription");
                System.out.print(title + deadline + description);
                // Step 5: Check if an assignment is selected, and if so, display it
                if (AssignmentsPostedList.getSelectedIndex() == -1) {
                    Controllers.Dialogues.showMessage("Please select an assignment to display");
                } else {
                    displayAssignment(title, deadline, description);
                }
            }
        } catch (SQLException ex) {
            // Step 6: If an error occurs, print the exception message
            System.out.println(ex);

        }
    }//GEN-LAST:event_ViewAssignmentButtonMouseClicked

    // This method is called when the "Delete Assignment" button is clicked
    private void DeleteAssignmentButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_DeleteAssignmentButtonMouseClicked
        if (AssignmentsPostedList.getSelectedIndex() == -1) {
            // Step 1: Check if an assignment is selected, and if not, display an error message
            Controllers.Dialogues.showMessage("Please select an assignment to delete");
        } else {
            Connection connection = null;
            ResultSet resultSet = null;
            try {
                // Step 2: Connect to the Postgresql database using JDBC driver
                Class.forName("org.postgresql.Driver");
                connection = DriverManager.getConnection("jdbc:postgresql://localhost:5432/postgres", "postgres", "postgres");

                // Step 3: Parse the selected item from the list to extract the assignment title and deadline
                String selectedItem = AssignmentsPostedList.getSelectedItem();
                String StrDate = selectedItem.substring(0, selectedItem.indexOf(" "));
                SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
                Date mDate = format.parse(StrDate);
                // String noteTitle = selectedItem.substring(11, StrDate.length() - 1);
                String assignmentTitle = selectedItem.substring(12);
                // Step 4: Prepare the SQL query to delete the corresponding row from the database
                String sql = "DELETE FROM scheduling.assignments WHERE assignmenttitle = ? AND assignmentdeadline = ?";
                PreparedStatement statement = connection.prepareStatement(sql);
                statement.setString(1, assignmentTitle);
                statement.setDate(2, new java.sql.Date(mDate.getTime()));
                statement.executeUpdate();
            } catch (SQLException e) {
                // Step 5: If an error occurs, print the exception message
                System.out.println(e.getMessage());
            } catch (ClassNotFoundException ex) {
            } catch (ParseException ex) {
            }

            try {
                // Step 6: Prepare the SQL query to retrieve the remaining assignments
                Class.forName("org.postgresql.Driver");
                connection = DriverManager.getConnection("jdbc:postgresql://localhost:5432/postgres", "postgres", "postgres");

                // Step 7: Execute the query and update the assignments list in the GUI
                String sql1 = "SELECT assignmenttitle, assignmentdeadline FROM scheduling.assignments";
                PreparedStatement statement1 = connection.prepareStatement(sql1);
                // Execute the query and retrieve the results
                resultSet = statement1.executeQuery();
                AssignmentsPostedList.removeAll();
                while (resultSet.next()) {
                    String title = resultSet.getString("assignmenttitle");
                    String date = resultSet.getString("assignmentdeadline");
                    // String body = resultSet.getString("notebody");
                    String listItem = date + "  " + title;
                    AssignmentsPostedList.add(listItem);
                }
            } catch (Exception e) {
                e.printStackTrace();
                Controllers.Dialogues.showMessage("Error deleting note");
            } finally {
                try {
                    // Close the result set and database connection
                    if (resultSet != null) {
                        resultSet.close();
                    }
                    if (connection != null) {
                        connection.close();
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }


    }//GEN-LAST:event_DeleteAssignmentButtonMouseClicked

    /*The method below sorts the assignments in the "AssignmentsPostedList" based
        on the search options chosen by the user, either by title or date.*/
    private void SortAssignmentsButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SortAssignmentsButtonMouseClicked
        if (AssignmentsPostedList.getItemCount() == 0) {
            Controllers.Dialogues.showMessage("No notes have been created yet");

        } else {
            //  UserInterface.Notes.NotesController.sort(NotesList);
            try {
                // Create an array of options for the user to choose from to sort their meetings
                final String[] options = {"Sort Latest first", "Sort Oldest first", "Sort Alphabetically"};
                // Display a dialog to ask the user how they would like to sort their notes
                String choice = Controllers.Dialogues.showOptions(
                        "How would you like to sort your notes?",
                        options);

                // Check if the user made a choice
                if (choice == null || choice.equals("")) {
                    // If no choice was made, return
                    return;
                }

                Connection connection = DriverManager.getConnection(
                        "jdbc:postgresql://localhost:5432/postgres", "postgres", "postgres");
                LocalDate currentDate = LocalDate.now();

                if (choice.equalsIgnoreCase(options[0])) {
                    // If the user chose to sort by latest date, set the type of sorting to be by latest date
                    DataStructures.type = DataStructures.type_Latest;

                    // Define the SQL statement to retrieve the "notetitle" and "date" columns where the studentid is appropriate
                    String sql = "SELECT assignmenttitle, assignmentdeadline  FROM scheduling.assignments ORDER BY assignmentdeadline DESC";
                    PreparedStatement statement = connection.prepareStatement(sql);
                    ResultSet resultSet = statement.executeQuery();
                    AssignmentsPostedList.removeAll();
                    while (resultSet.next()) {
                        String title = resultSet.getString("assignmenttitle");
                        Date date = resultSet.getDate("assignmentdeadline");
                        AssignmentsPostedList.add(date.toString() + " " + title);
                        System.out.println(date.toString() + " " + title);

                    }

                } else if (choice.equalsIgnoreCase(options[1])) {
                    // If the user chose to sort by oldest date, set the type of sorting to be by oldest date
                    DataStructures.type = DataStructures.type_Oldest;

                    // Define the SQL statement to retrieve the "notetitle" and "date" columns where the studentid is appropriate
                    String sql = "SELECT assignmenttitle, assignmentdeadline  FROM scheduling.assignments ORDER BY assignmentdeadline ASC";
                    PreparedStatement statement = connection.prepareStatement(sql);
                    ResultSet resultSet = statement.executeQuery();
                    System.out.println(resultSet);
                    System.out.println(sql);
                    AssignmentsPostedList.removeAll();
                    while (resultSet.next()) {
                        String title = resultSet.getString("assignmenttitle");
                        Date date = resultSet.getDate("assignmentdeadline");
                        AssignmentsPostedList.add(date.toString() + " " + title);
                        System.out.println(date.toString() + " " + title);

                    }
                } else if (choice.equalsIgnoreCase(options[2])) {
                    // If the user chose to sort by oldest date, set the type of sorting to be by oldest date
                    DataStructures.type = DataStructures.type_Alphabetical;
                    // Define the SQL statement to retrieve the "notetitle" and "date" columns where the studentid is appropriate
                    String sql = "SELECT assignmenttitle, assignmentdeadline  FROM scheduling.assignments ORDER BY assignmenttitle ASC";
                    PreparedStatement statement = connection.prepareStatement(sql);
                    ResultSet resultSet = statement.executeQuery();
                    System.out.println(resultSet);
                    System.out.println(sql);
                    AssignmentsPostedList.removeAll();
                    while (resultSet.next()) {
                        String title = resultSet.getString("assignmenttitle");
                        Date date = resultSet.getDate("assignmentdeadline");
                        AssignmentsPostedList.add(date.toString() + " " + title);
                        System.out.println(date.toString() + " " + title);

                    }

                }
            } catch (SQLException ex) {
                ex.printStackTrace();
            }


        }
    }//GEN-LAST:event_SortAssignmentsButtonMouseClicked

    /*The method below creates a new "AdminMain" frame and makes it visible,
        while hiding the current frame.  */
    private void BackButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BackButtonMouseClicked
        JFrame frame = new AdminMain();
        frame.setVisible(true);
        this.setVisible(false);

    }//GEN-LAST:event_BackButtonMouseClicked

    private void SortAssignmentsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SortAssignmentsButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_SortAssignmentsButtonActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        try {
            // Connect to the database
            Connection connection = DriverManager.getConnection(
                    "jdbc:postgresql://localhost:5432/postgres", "postgres", "postgres");

            // Prepare the SQL query
            String sql = "SELECT assignmenttitle, assignmentdeadline, assignmentdescription FROM scheduling.assignments";
            PreparedStatement statement = connection.prepareStatement(sql);

            // Execute the query and retrieve the results
            ResultSet result = statement.executeQuery();
            while (result.next()) {
                String title = result.getString("assignmenttitle");
                String deadline = result.getString("assignmentdeadline");
                String body = result.getString("assignmentdescription");
                String listItem = deadline + "  " + title;
                AssignmentsPostedList.add(listItem);
            }

            if (AssignmentsPostedList.getItemCount() == 0) {
                Controllers.Dialogues.showMessage("No available assignments");
            }
        } catch (SQLException ex) {
            // Handle the exception here
        }

    }//GEN-LAST:event_formWindowOpened
    // End of variables declaration                   

    private int[] allIndices(AssignmentsUI Assignment) {
        return null;
    }
}
